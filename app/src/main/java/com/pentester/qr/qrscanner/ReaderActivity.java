package com.pentester.qr.qrscanner;

/**
 * Created by Ashley on 16/12/2017.
 */

import android.app.Activity;
import android.content.Intent;
import android.graphics.Paint;
import android.os.StrictMode;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.view.View;
import android.webkit.URLUtil;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.zxing.Result;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.ScanInfo;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;

public class ReaderActivity extends AppCompatActivity {
    private Button scan_btn;
    private Button result_btn;
    private TextView output_box1;
    private TextView output_box2;
    private TextView ResultText;
    String decryptURL;
    String positive;
    String total;

    URLConnection connectURL(String strURL) {
        URLConnection conn = null;
        try {
            URL inputURL = new URL(strURL);
            conn = inputURL.openConnection();

        }catch(MalformedURLException e) {
            System.out.println("Please input a valid URL");
        }catch(IOException ioe) {
            System.out.println("Can not connect to the URL");
        }
        return conn;
    }

    public void scanUrl(String URL_Input) {
        try {
            VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(""); // Insert VirusTotal API key here.
            VirustotalPublicV2 virusTotalRef = new VirustotalPublicV2Impl();

            String urls[] = {URL_Input};
            ScanInfo[] scanInfoArr = virusTotalRef.scanUrls(urls);

            for (ScanInfo scanInformation : scanInfoArr) {
                output_box2.setText("");
                output_box2.append("___SCAN INFORMATION___");
                output_box2.append("\nMD5 :\t" + scanInformation.getMd5());
                output_box2.append("\nPerma Link :\t" + scanInformation.getPermalink());
                output_box2.append("\nResource :\t" + scanInformation.getResource());
                output_box2.append("\nScan Date :\t" + scanInformation.getScanDate());
                output_box2.append("\nScan Id :\t" + scanInformation.getScanId());
                output_box2.append("\nSHA1 :\t" + scanInformation.getSha1());
                output_box2.append("\nSHA256 :\t" + scanInformation.getSha256());
                output_box2.append("\nVerbose Msg :\t" + scanInformation.getVerboseMessage());
                output_box2.append("\nResponse Code :\t" + scanInformation.getResponseCode());
            }

        } catch (APIKeyNotFoundException ex) {
            System.err.println("API Key not found! " + ex.getMessage());
        } catch (UnsupportedEncodingException ex) {
            System.err.println("Unsupported Encoding Format!" + ex.getMessage());
        } catch (UnauthorizedAccessException ex) {
            System.err.println("Invalid API Key " + ex.getMessage());
        } catch (Exception ex) {
            System.err.println("Something Bad Happened! " + ex.getMessage());
        }
    }

    public void getUrlReport(String URL_Input){
        try {
            VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(""); // Insert VirusTotal API key here.
            VirustotalPublicV2 virusTotalRef = new VirustotalPublicV2Impl();

            String urls[] = {URL_Input};
            FileScanReport[] reports = virusTotalRef.getUrlScanReport(urls, false);

            for (FileScanReport report : reports) {
                if(report.getResponseCode()==0){
                    continue;
                }
                output_box2.setText("");
                output_box2.append("\nMD5 :\t" + report.getMd5());
                output_box2.append("\nPerma link :\t" + report.getPermalink());
                output_box2.append("\nResourve :\t" + report.getResource());
                output_box2.append("\nScan Date :\t" + report.getScanDate());
                output_box2.append("\nScan Id :\t" + report.getScanId());
                output_box2.append("\nSHA1 :\t" + report.getSha1());
                output_box2.append("\nSHA256 :\t" + report.getSha256());
                output_box2.append("\nVerbose Msg :\t" + report.getVerboseMessage());
                output_box2.append("\nResponse Code :\t" + report.getResponseCode());
                output_box2.append("\nPositives :\t" + report.getPositives());
                output_box2.append("\nTotal :\t" + report.getTotal());

                positive = report.getPositives().toString();
                total = report.getTotal().toString();

                /*
                HashMap<String, VirusScanInfo> scans = report.getScans();
                for (String key : scans.keySet()) {
                    VirusScanInfo virusInfo = scans.get(key);
                    System.out.println("Scanner : " + key);
                    System.out.println("\t\t Resut : " + virusInfo.getResult());
                    System.out.println("\t\t Update : " + virusInfo.getUpdate());
                    System.out.println("\t\t Version :" + virusInfo.getVersion());
                }
                */
            }

        } catch (APIKeyNotFoundException ex) {
            System.err.println("API Key not found! " + ex.getMessage());
        } catch (UnsupportedEncodingException ex) {
            System.err.println("Unsupported Encoding Format!" + ex.getMessage());
        } catch (UnauthorizedAccessException ex) {
            System.err.println("Invalid API Key " + ex.getMessage());
        } catch (Exception ex) {
            System.err.println("Something Bad Happened! " + ex.getMessage());
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        int SDK_INT = android.os.Build.VERSION.SDK_INT;
        if (SDK_INT > 8) {
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
        }

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_reader);
        scan_btn = (Button) findViewById(R.id.scan_btn);
        result_btn = (Button) findViewById(R.id.result_btn);
        output_box1 = (TextView) findViewById(R.id.output_box1);
        output_box2 = (TextView) findViewById(R.id.output_box2);
        output_box2.setMovementMethod(new ScrollingMovementMethod());
        ResultText = (TextView) findViewById(R.id.ResultText);

        final Activity activity = this;
        scan_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                IntentIntegrator integrator = new IntentIntegrator(activity);
                integrator.setDesiredBarcodeFormats(IntentIntegrator.QR_CODE_TYPES);
                integrator.setPrompt("Scan");
                integrator.setCameraId(0);
                integrator.setBeepEnabled(false);
                integrator.setBarcodeImageEnabled(false);
                integrator.initiateScan();
                ResultText.setText("");
            }
        });

        result_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                System.out.println("Check: " + output_box2.getText());
                if (decryptURL == null) {
                    Toast.makeText(ReaderActivity.this, "Please Scan first", Toast.LENGTH_LONG).show();
                }
                else if (output_box2.getText().toString().matches("")) {
                    Toast.makeText(ReaderActivity.this, "URL could not be scanned", Toast.LENGTH_LONG).show();
                }
                else {
                    getUrlReport(decryptURL);
                    ResultText.setText("Detection: " + positive + " / " + total);
                }
            }
        });

        TextView UnderlineText = (TextView) findViewById(R.id.UnderlineText);
        UnderlineText.setPaintFlags(UnderlineText.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);
        if(result != null){
            if(result.getContents()== null){
                Toast.makeText(this, "You cancelled the scanning", Toast.LENGTH_LONG).show();
            }

            else if (URLUtil.isValidUrl(result.getContents())) {
                //String httpURL = result.getContents().replaceFirst("https:", "http:");
                //System.out.println(result.getContents());
                //System.out.println(httpURL);

                URL newURL = null;
                //String newURL = result.getContents().replaceFirst("https:", "http:");
                try {
                    newURL = new URL(result.getContents());
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }

                HttpURLConnection urlConn = null;
                try {
                    urlConn = (HttpURLConnection) newURL.openConnection();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                decryptURL = urlConn.getHeaderField("Location");
                System.out.println(decryptURL);
                if (decryptURL == null) {
                    decryptURL = result.getContents();
                    output_box1.setText("URL:\n" + result.getContents());
                    scanUrl(result.getContents());
                }
                else {
                    output_box1.setText("Unshorten URL:\n" + result.getContents() + "\n\nShorten URL:\n" + decryptURL);
                    scanUrl(decryptURL);
                }
            }
            else {
                output_box1.setText(result.getContents());
            }
        }
        else {
            super.onActivityResult(requestCode, resultCode, data);
        }
    }
}
